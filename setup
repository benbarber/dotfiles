#!/usr/bin/env bash
#
# Dotfiles installer

export XDG_CONFIG_HOME="$HOME/.config"

cd "$(dirname "$0")/.."

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f $XDG_CONFIG_HOME/git/gitconfig.local.sylk ]
  then
    echo ''
    info '==> setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" $XDG_CONFIG_HOME/git/gitconfig.local.sylk.example > $XDG_CONFIG_HOME/git/gitconfig.local.sylk

    success '> gitconfig'
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "> removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "> moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "> skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "> linked $1 to $2"
  fi
}

symlink_dotfiles () {
  echo ''
  info '==> setting up symlinks'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$XDG_CONFIG_HOME" -maxdepth 2 -name '*.sylk' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_dependencies () {
  # If we're on a Mac, let's install our dependencies
  if [ "$(uname -s)" == "Darwin" ]
  then
    if source $XDG_CONFIG_HOME/bin/dotfiles | exec dotfiles install | while read -r data; do info "$data"; done
    then
      success 'dependencies installed'
    else
      fail 'error installing dependencies'
    fi
  fi
}

info '==> Running dotfiles installer...'
setup_gitconfig
symlink_dotfiles
install_dependencies
success '==> All installed!'
